"use client";
import React from "react";
import { useEffect, useMemo, useState } from "react";
import Link from "next/link";

type Event = {
  title: string;
  time: string;      // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö "HH:MM-HH:MM"
  status?: string;
  date: string;      // YYYY-MM-DD
};

export default function DailyClient() {
  // ‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ö‡∏ö real-time
  const [now, setNow] = useState(new Date());
  useEffect(() => {
    const t = setInterval(() => setNow(new Date()), 1000);
    return () => clearInterval(t);
  }, []);

  // Helper ‡∏ß‡∏±‡∏ô/‡πÄ‡∏ß‡∏•‡∏≤
  const thaiMonths = [
    "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°","‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå","‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°","‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô","‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°","‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
    "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°","‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°","‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô","‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°","‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô","‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°",
  ];
  const thaiDays = ["‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå","‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå","‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£","‡∏û‡∏∏‡∏ò","‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ","‡∏®‡∏∏‡∏Å‡∏£‡πå","‡πÄ‡∏™‡∏≤‡∏£‡πå"];

  // Label ‡∏ß‡∏±‡∏ô+‡πÄ‡∏ß‡∏•‡∏≤ (real-time)
  const dateLabel = useMemo(() => {
    const d = now;
    const timeStr = d.toLocaleTimeString("th-TH", {
      hour: "2-digit", minute: "2-digit", second: "2-digit", hour12: false,
    });
    return `${thaiDays[d.getDay()]} ${d.getDate()} ${thaiMonths[d.getMonth()]} ${d.getFullYear() + 543} ‚Ä¢ ${timeStr}`;
  }, [now]);

  // ‡πÉ‡∏ä‡πâ YYYY-MM-DD ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ú‡∏π‡∏Å mock ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡πÅ‡∏ï‡πà‡∏Å‡∏£‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢ Date ‡∏à‡∏£‡∏¥‡∏á
  const todayStr = useMemo(() => now.toISOString().split("T")[0], [now]);

  // ------- mock data -------
// ‡πÄ‡∏ï‡∏¥‡∏° mock ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô" (‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≤‡∏á‡∏•‡πà‡∏≤‡∏á)
const moreUnregistered: Event[] = [
  { title: "‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Å‡∏ä‡πá‡∏≠‡∏õ UX ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤", time: "14:00-15:30", date: todayStr },
  { title: "‡∏ö‡∏π‡∏ò‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ä‡∏°‡∏£‡∏°‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°",        time: "15:00-16:00", date: todayStr },
  { title: "‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£ Hackathon 2025",  time: "19:00-21:00", date: todayStr },

  { title: "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏à‡∏¥‡∏ï‡∏≠‡∏≤‡∏™‡∏≤‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ñ‡∏ì‡∏∞", time: "20:20-21:00", date: "2025-10-09" },
  { title: "Open House ‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πá‡∏ö‡∏ß‡∏¥‡∏à‡∏±‡∏¢",        time: "10:00-12:00", date: "2025-10-11" },
  { title: "‡∏≠‡∏ö‡∏£‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô Git & GitHub",       time: "13:00-15:00", date: "2025-10-12" },
  { title: "‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô E-Sports ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏Ñ‡∏ì‡∏∞",       time: "17:00-20:00", date: "2025-10-13" },
  { title: "‡∏™‡∏±‡∏°‡∏°‡∏ô‡∏≤ Startup ‡∏Å‡∏±‡∏ö‡∏®‡∏¥‡∏©‡∏¢‡πå‡πÄ‡∏Å‡πà‡∏≤",     time: "16:00-18:00", date: "2025-10-14" },
  { title: "Movie Night ‡∏ó‡∏µ‡πà‡∏´‡∏≠‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏¢‡πà‡∏≠‡∏¢",     time: "18:30-21:00", date: "2025-10-15" },
  { title: "Mini Concert ‡∏ä‡∏°‡∏£‡∏°‡∏î‡∏ô‡∏ï‡∏£‡∏µ",          time: "19:00-21:00", date: "2025-10-16" },
];

// ‡∏£‡∏ß‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö events ‡πÄ‡∏î‡∏¥‡∏°
const events: Event[] = [
  // ...‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì...
  { title: "‡∏Ñ‡∏≤‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ô CN210", time: "13:30-16:30", date: todayStr },
  { title: "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏£‡∏±‡∏ö‡∏ô‡πâ‡∏≠‡∏á Firstmeet TU-PINE", time: "16:30-18:00", date: todayStr },
  { title: "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏â‡∏•‡∏¢‡∏™‡∏≤‡∏¢‡∏£‡∏´‡∏±‡∏™", time: "18:00-20:00", date: todayStr },
  { title: "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏£‡∏±‡∏ö‡∏ô‡πâ‡∏≠‡∏á‡∏ä‡∏°‡∏£‡∏° SAI", time: "20:00-22:00", date: todayStr, status: "‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°" },
  { title: "‡πÅ‡∏Ñ‡∏°‡∏õ‡πå‡πÄ‡∏Å‡∏°‡∏°‡∏¥‡πà‡∏á", time: "20:30-22:00", date: todayStr, status: "‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°" },
  { title: "‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•", time: "16:00-18:00", date: "2025-09-28", status: "‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°" },
  { title: "‡∏á‡∏≤‡∏ô‡∏î‡∏ô‡∏ï‡∏£‡∏µ", time: "16:00-18:00", date: "2025-11-29", status: "‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°" },
  { title: "‡∏ï‡∏•‡∏≤‡∏î‡∏ô‡∏±‡∏î‡πÄ‡∏•‡∏µ‡∏¢‡∏ö‡∏£‡∏≤‡∏á 1", time: "18:30-19:00", date: "2025-11-29", status: "‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°" },

  // üëá ‡πÄ‡∏ï‡∏¥‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
  ...moreUnregistered,
];

  // ----------------------------------------------

  // Utils ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ß‡∏±‡∏ô‡πÅ‡∏ö‡∏ö local
  const startOfDay = (d: Date) => {
    const x = new Date(d);
    x.setHours(0, 0, 0, 0);
    return x;
  };
  const parseYmd = (ymd: string) => {
    const [y, m, d] = ymd.split("-").map(Number);
    return new Date(y, m - 1, d, 0, 0, 0, 0);
  };
  const sameDay = (a: Date, b: Date) => startOfDay(a).getTime() === startOfDay(b).getTime();

  // ‡πÅ‡∏õ‡∏•‡∏á "HH:MM-HH:MM" -> ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°/‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏à‡∏£‡∏¥‡∏á
  const getStartDateTime = (ev: Event) => {
    try {
      const [startStr] = ev.time.split("-");
      const [hh, mm] = startStr.split(":").map(Number);
      const d = parseYmd(ev.date);
      d.setHours(hh ?? 0, mm ?? 0, 0, 0);
      return d;
    } catch {
      // ‡∏ñ‡πâ‡∏≤ format ‡πÄ‡∏û‡∏µ‡πâ‡∏¢‡∏ô ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï (‡πÑ‡∏°‡πà‡∏ï‡∏±‡∏î‡∏ó‡∏¥‡πâ‡∏á)
      return new Date(now.getTime() + 1e12);
    }
  };

  const isRegistered = (ev: Event) =>
    ev.status === "‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°" || ev.title.startsWith("‡∏Ñ‡∏≤‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ô");

  // üü§ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ö‡∏ô: ‚Äú‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô‚Äù ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ + ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≤‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏Å‡πà‡∏≠‡∏ô
  const myEvents = useMemo(() => {
    return events
      .filter((ev) => sameDay(parseYmd(ev.date), now) && isRegistered(ev))
      .sort((a, b) => {
        const aClass = a.title.startsWith("‡∏Ñ‡∏≤‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ô") ? 0 : 1;
        const bClass = b.title.startsWith("‡∏Ñ‡∏≤‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ô") ? 0 : 1;
        return aClass - bClass;
      });
  }, [events, now]);

  // üîµ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏•‡πà‡∏≤‡∏á: ‚Äú‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‚Äù
  // ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ + ‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï ‡πÅ‡∏ï‡πà "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ" ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà startTime > now
  // (‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° -> ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏•‡πà‡∏≤‡∏á)
  const otherEvents = useMemo(() => {
    return events.filter((ev) => {
      const notMine = !isRegistered(ev);
      if (!notMine) return false;

      const d = parseYmd(ev.date);
      const isToday = sameDay(d, now);
      const isFutureDay = d.getTime() > startOfDay(now).getTime();

      if (isFutureDay) return true;             // ‡∏ß‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤ ‡πÇ‡∏ä‡∏ß‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      if (!isToday) return false;               // ‡∏≠‡∏î‡∏µ‡∏ï ‡πÑ‡∏°‡πà‡πÇ‡∏ä‡∏ß‡πå

      // ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: ‡πÉ‡∏´‡πâ‡πÇ‡∏ä‡∏ß‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á "‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°"
      const startDT = getStartDateTime(ev);
      return startDT.getTime() > now.getTime();
    });
  }, [events, now]);

  // map ‡πÉ‡∏´‡πâ JSX ‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏∑‡πà‡∏ô
  const todayEvents = myEvents;        // ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ö‡∏ô: ‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô (‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ)
  const upcomingEvents = otherEvents;  // ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏•‡πà‡∏≤‡∏á: ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô (‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ+‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï ‡πÅ‡∏ï‡πà‡∏•‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°)

  return (
    <main className="bg-[#f6f1e7] flex flex-col items-center p-6">
      <h1 className="w-full flex flex-col items-end text-[#730217] text-xl sm:text-2xl text-shadow-lg mb-6">
        <span className="text-2xl sm:text-3xl font-semibold mb-2">‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô</span>
        <span className="heading font-bold">{dateLabel}</span>
      </h1>

      <div className="bg-black w-full p-4 rounded">
        <section className="bg-white p-6">
          {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô */}
          <div className="flex justify-between font-bold text-xl sm:text-2xl mb-4 text-black p-2">
            <h2>‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô</h2>
            <h2>‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤</h2>
          </div>

          <table className="w-full text-sm border-collapse overflow-hidden">
            <tbody>
              {todayEvents.length === 0 ? (
                <tr>
                  <td className="p-4 text-center text-gray-500" colSpan={2}>
                    ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
                  </td>
                </tr>
              ) : (
                todayEvents.map((ev, idx) => (
                  <tr
                    key={idx}
                    className={`${
                      idx % 2 === 0 ? "bg-[#FFC26D]" : "bg-[#FF975E]"
                    } hover:bg-[#ffeccc] transition`}
                  >
                    <td className="p-3 border font-medium">{ev.title}</td>
                    <td className="p-3 border">{ev.time}</td>
                  </tr>
                ))
              )}
            </tbody>
          </table>

          {/* üîπ ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ô‡∏µ‡πâ */}
          <div className="w-full mt-10">
            <div className="flex justify-between font-bold text-xl sm:text-2xl mb-4 text-black p-2">
              <h2>‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏£‡πá‡∏ß ‡πÜ ‡∏ô‡∏µ‡πâ</h2>
              <h2>‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£</h2>
              <h2>‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤</h2>
            </div>

            <table className="w-full text-sm border-collapse overflow-hidden">
              <thead>
                <tr className="bg-[#f3f3f3] text-left text-gray-700">
                </tr>
              </thead>
              <tbody>
                {upcomingEvents.length === 0 ? (
                  <tr>
                    <td className="p-4 text-center text-gray-500" colSpan={3}>
                      ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô (‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ/‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï)
                    </td>
                  </tr>
                ) : (
                  upcomingEvents.map((ev, idx) => {
                    const d = parseYmd(ev.date);
                    const label = `${d.getDate()} ${thaiMonths[d.getMonth()]} ${d.getFullYear() + 543}`;
                    return (
                      <tr
                        key={idx}
                        className={`${
                          idx % 2 === 0 ? "bg-[#8BD8FF]" : "bg-[#8CBAFF]"
                        } hover:bg-[#cae5ff] transition`}
                      >
                       <td className="p-3 border font-medium">
  <div className="flex justify-between items-center gap-3">
    <span className="truncate">{ev.title}</span>

    
  </div>
</td>

                        <td className="p-3 border text-center">
                          <span className="text-gray-700">{label}</span>
                        </td>
                        <td className="p-3 border text-center">{ev.time}</td>
                      </tr>
                    );
                  })
                )}
              </tbody>
            </table>
          </div>
        </section>
      </div>
    </main>
  );
}
